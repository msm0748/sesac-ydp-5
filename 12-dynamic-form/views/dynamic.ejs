<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼 전송</title>
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.4.0/axios.min.js"
      integrity="sha512-uMtXmF28A2Ab/JJO2t/vYhlaa/3ahUOgj1Zf27M5rOo8/+fcTUVH0/E0ll68njmjrLqOBjXM3V9NiPFL5ywWPQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
  </head>
  <body>
    <h1>동적 폼 전송 연습하기</h1>

    <!-- 이름, 성별(라디오버튼)을 정보를 입력받는 폼 -->
    <form name="register">
      <label for="name">이름</label>
      <input type="text" id="name" name="name" value="새싹" />
      <br />

      성별
      <input type="radio" name="gender" value="m" id="male" checked />
      <label for="male">남</label>
      <input type="radio" name="gender" value="f" id="female" />
      <label for="female">여</label>
      <br />

      <button type="button" onclick="ajaxGet();">Ajax Get 제출</button>
      <button type="button" onclick="ajaxPost();">Ajax Post 제출</button>

      <br />
      <button type="button" onclick="axiosGet();">axios Get 제출</button>
      <button type="button" onclick="axiosPost();">axios Post 제출</button>

      <br />
      <button type="button" onclick="asyncAxiosGet();">asyncAxiosGet 제출</button>
      <button type="button" onclick="asyncAxiosPost();">asyncAxiosPost 제출</button>

      <br />
      <button type="button" onclick="fetchGet();">fetch Get 제출</button>
      <button type="button" onclick="fetchPost();">fetch Post 제출</button>
    </form>

    <!-- 동적폼 전송 결과를 보여줄 곳 -->
    <div class="result" style="color: blue"></div>
    <script>
      // frontend javascript
      const resultBox = document.querySelector('.result');

      function ajaxGet() {
        console.log('ajaxGet 함수 호출!');

        // 폼 선택
        const form = document.forms['register'];

        // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // Ajax로 서버에 Get 요청 보내기
        $.ajax({
          type: 'get', // 요청의 종류 (= form의 method 속성)
          url: '/ajax', // 요청의 경로 (= form의 action 속성)
          data: data, // 요청에 실어보낼 데이터 (서버가 받게 될 데이터)
          success: (data) => {
            // 요청이 성공적으로 수행되었을 때 실행할 함수
            console.log(data);
            // 퀴즈
            resultBox.textContent = `Get 요청 !! ${data.name}님 ${data.gender} 이시죠???`;
          },
        });
      }

      function ajaxPost() {
        console.log('ajaxPost 함수 호출!');

        // 폼 선택
        const form = document.forms['register'];

        // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // Ajax로 서버에 Post 요청 보내기
        $.ajax({
          type: 'post',
          url: '/ajax',
          data: data,
          success: (data) => {
            console.log(data);
            // 퀴즈
            $('.result').text(`Post 요청 !! ${data.name}님 ${data.gender}이시죠?`);
          },
        });
      }

      function axiosGet() {
        console.log('axiosGet 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // axios 요청의 결과는 Promise 객체
        // -> then, catch 메서드로 체이닝이 가능!
        // -> async, await 도 사용할 수 있음!
        axios({
          // method: 'get', // 요청 방식 (= form method 속성)
          // url: '/axios', // 요청 경로 (= form action 속성)
          // params: data, // 서버로 보낼 데이터 (query string)

          // params키를 사용하지 않고 query string을 직접 정의해서 요청을 보낼 수도 있음 (위와 동일한 코드)
          method: 'get', // 요청 방식 (= form method 속성)
          url: `/axios?name=${form.name.value}&gender=${form.gender.value}`, // 요청 경로 (= form action 속성)
        })
          .then((response) => {
            console.log(response); // 서버의 응답 결과
            console.log(response.data); // 서버의 응답 데이터를 확인

            const { name, gender } = response.data;
            resultBox.textContent = `Get 요청 !! ${name}님 ${gender} 이시죠???`;
          })
          .catch((err) => {
            console.log('Error!', err);
          });
      }
      // async, await
      async function asyncAxiosGet() {
        console.log('asyncAxiosGet 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const {
            data: { name, gender },
          } = await axios({
            method: 'get', // 요청 방식 (= form method 속성)
            url: '/axios', // 요청 경로 (= form action 속성)
            params: data, // 서버로 보낼 데이터 (query string)
          });
          resultBox.textContent = `Get 요청 !! ${name}님 ${gender} 이시죠???`;
        } catch (err) {
          console.log(err);
        }
      }

      function axiosPost() {
        console.log('axiosPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        axios({
          method: 'post',
          url: '/axios',
          data: data,
        })
          .then((response) => {
            console.log(response);
            const { name, gender } = response.data;
            resultBox.textContent = `Get 요청 !! ${name}님 ${gender} 이시죠???`;
          })
          .catch((err) => {
            console.log('Error!', err);
          });
      }

      // async, await
      async function asyncAxiosPost() {
        console.log('asyncAxiosPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        try {
          const {
            data: { name, gender },
          } = await axios({
            method: 'post', // 요청 방식 (= form method 속성)
            url: '/axios', // 요청 경로 (= form action 속성)
            data, // 서버로 보낼 데이터 (query string)
          });
          resultBox.textContent = `Post 요청 !! ${name}님 ${gender} 이시죠???`;
        } catch (err) {
          console.log(err);
        }
      }

      // fetch(url, option)
      function fetchGet() {
        console.log('fetchGet 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // fetch는 default로 get 방식으로 작동 options를 생략 가능~
        fetch(`/fetch?name=${form.name.value}&gender=${form.gender.value}`)
          .then((response) => {
            console.log(response);
            return response.json();
            // JSON 형태로 응답 데이터를 전달받음. 응답(response) 객체는 json() 메서드를 제공
            // 응답(response) 객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체(js obj)로 변환
          })
          .then((data) => {
            // data: 직전 then 메서드의 리턴값: response.json();
            console.log(data);
            const { name, gender } = data;
            resultBox.textContent = `Post 요청 !! ${name}님 ${gender} 이시죠???`;
          });
      }

      function fetchPost() {
        console.log('fetchPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // fetch를 이용해 post 요청을 날릴 때에는 option 객체가 반드시 필요함!
        // 1. method 키 post 지정
        // 2. headers 키 JSON 포맷 사용 선언
        // 3. body 키 서버로 보낼 데이터

        fetch('/fetch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
          // data: js obj
          // JSON.stringify(data): js obj -> json
        })
          .then((response) => {
            console.log(response);
            return response.json();
            // JSON 형태로 응답 데이터를 전달받음. 응답(response) 객체는 json() 메서드를 제공
            // 응답(response) 객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체(js obj)로 변환
          })
          .then((data) => {
            // data: 직전 then 메서드의 리턴값: response.json();
            console.log(data);
            const { name, gender } = data;
            resultBox.textContent = `Post 요청 !! ${name}님 ${gender} 이시죠???`;
          });
      }
    </script>
  </body>
</html>
